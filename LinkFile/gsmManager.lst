C51 COMPILER V9.54   GSMMANAGER                                                            05/11/2019 18:19:50 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE GSMMANAGER
OBJECT MODULE PLACED IN .\bin\gsmManager.obj
COMPILER INVOKED BY: E:\keil5\C51\BIN\C51.EXE gsmManager\gsmManager.c BROWSE DEBUG OBJECTEXTEND PRINT(.\LinkFile\gsmMana
                    -ger.lst) TABS(2) OBJECT(.\bin\gsmManager.obj)

line level    source

   1          #include "gsmManager.h"
   2          #define Buf_Max       70  //´®¿Ú1»º´æ³¤¶È
   3          uint8_t First_Int = 0;
   4          xdata uint8_t Uart1_Buf[Buf_Max];
   5          /*******************************************************************************
   6          *ËµÃ÷:²¦´òµç»°£¬ÐÞ¸ÄÕâÀï¿ÉÒÔÐÞ¸Ä²¦´òµÄµç»°¡£
   7          *******************************************************************************/
   8          xdata uint8_t  *phone_num = "AT+CMGS=\"17377349850\""; 
   9          const bool sendThresholdToPhone(const uint8_t *content)
  10          {
  11   1      
  12   1      #ifdef UseTest
                bool ret;
                ret = UART1_Send_AT_Command(content,"",1,50);//²âÊÔÍ¨ÐÅÊÇ·ñ³É¹¦
                if(!ret)
                {
                  TestWarnLed=~ TestWarnLed;
                  return false;
                }
                return true;
              #else
  22   1        uint8_t ret;
  23   1        char end_char[2];
  24   1        
  25   1        end_char[0] = 0x1A;//½áÊø×Ö·û
  26   1        end_char[1] = '\0';
  27   1        
  28   1        //ÉèÖÃ´æ´¢Î»ÖÃ
  29   1        ret = UART1_Send_AT_Command("AT+CPMS=\"SM\",\"ME\",\"SM\"","OK",3,200);
  30   1        if(ret == 0)
  31   1        {
  32   2          return false;
  33   2        }
  34   1        
  35   1        ret = UART1_Send_AT_Command("AT+CMGF=1","OK",3,100);//ÅäÖÃÎªTEXTÄ£Ê½
  36   1        if(ret == 0)
  37   1        {
  38   2          return false;
  39   2        }
  40   1        
  41   1        
  42   1        ret = UART1_Send_AT_Command("AT+CSCS=\"GSM\"","OK",3,100);//ÉèÖÃ×Ö·û¸ñÊ½
  43   1        if(ret == 0)
  44   1        {
  45   2          return false;
  46   2        }
  47   1        
  48   1        ret = UART1_Send_AT_Command(phone_num,">",3,100);//ÊäÈëÊÕÐÅÈËµÄµç»°ºÅÂë
  49   1        if(ret == 0)
  50   1        {
  51   2          return false;
  52   2        }
  53   1        
  54   1        UART1_SendString(content); //´Ëº¯Êý·¢ËÍ¶ÌÐÅÄÚÈÝ ²»¼Ó»Ø³µ»»ÐÐ
C51 COMPILER V9.54   GSMMANAGER                                                            05/11/2019 18:19:50 PAGE 2   

  55   1        ret = UART1_Send_AT_Command_END(end_char,"OK",1,500);//·¢ËÍ½áÊø·û£¬µÈ´ý·µ»Øok,µÈ´ý5S·¢Ò»´Î£¬ÒòÎª¶ÌÐÅ³É¹¦·
             -¢ËÍµÄ×´Ì¬Ê±¼ä±È½Ï³¤
  56   1        if(ret == 0)
  57   1        {
  58   2          return false;
  59   2        }
  60   1        return true;
  61   1      #endif
  62   1      }
  63          /*----------------------------
  64          UART1 ·¢ËÍ×Ö·û´®
  65          -----------------------------*/
  66          static void UART1_SendString(char *s)
  67          {
  68   1        while(*s)//¼ì²â×Ö·û´®½áÊø·û
  69   1        {
  70   2          UART1_SendData(*s++);//·¢ËÍµ±Ç°×Ö·û
  71   2        }
  72   1      }
  73          static const bool UART1_Send_AT_Command(uint8_t *sendData,uint8_t *backData,uint8_t wait_time, uint16_t in
             -terval_time)       
  74          {
  75   1        uint8_t count=0;
  76   1      
  77   1        CLR_Buf();  //ÏÈÇå¿Õ½ÓÊÕbuffer
  78   1        while(count < wait_time)                    
  79   1        {
  80   2          UART1_Send_Command(sendData);//°ÑÖ¸Áî·¢³öÈ¥ »á×Ô¶¯Ìí¼Ó\r\nºó×ºµÄ
  81   2          g_delay(interval_time);
  82   2          if(Find(backData))            //²éÕÒÐèÒªÓ¦´ðµÄ×Ö·û
  83   2          {
  84   3            return true;
  85   3          }
  86   2          count++;
  87   2        }
  88   1        return false;
  89   1      }
  90          /*******************************************************************************
  91          * º¯ÊýÃû : CLR_Buf
  92          * ÃèÊö   : Çå³ý´®¿Ú2»º´æÊý¾Ý
  93          * ÊäÈë   : 
  94          * Êä³ö   : 
  95          * ·µ»Ø   : 
  96          * ×¢Òâ   : 
  97          *******************************************************************************/
  98          static void CLR_Buf(void)
  99          {
 100   1        uint8_t count;
 101   1        for(count=0;count<Buf_Max;count++)      //½«»º´æÄÚÈÝÇåÁã
 102   1        {
 103   2          Uart1_Buf[count] = 0x00;
 104   2        }
 105   1          First_Int = 0;              //½ÓÊÕ×Ö·û´®µÄÆðÊ¼´æ´¢Î»ÖÃ
 106   1      }
 107          /**********************************
 108          ·¢ËÍÃüÁî
 109          **********************************/
 110          static void UART1_Send_Command(uint8_t *s)
 111          {
 112   1        CLR_Buf(); 
 113   1        while(*s)//¼ì²â×Ö·û´®½áÊø·û
 114   1        {
C51 COMPILER V9.54   GSMMANAGER                                                            05/11/2019 18:19:50 PAGE 3   

 115   2          UART1_SendData(*s++);//·¢ËÍµ±Ç°×Ö·û
 116   2        }
 117   1        #ifndef UseTest
 118   1        UART1_SendData(0x0D);
 119   1        #endif 
 120   1      }
 121          /*----------------------------
 122          UART1 ·¢ËÍ´®¿ÚÊý¾Ý
 123          -----------------------------*/
 124          static void UART1_SendData(uint8_t dat)
 125          {
 126   1        ES=0;     //¹Ø´®¿ÚÖÐ¶Ï
 127   1        SBUF=dat;     
 128   1        while(TI!=1); //µÈ´ý·¢ËÍ³É¹¦
 129   1        TI=0;     //Çå³ý·¢ËÍÖÐ¶Ï±êÖ¾
 130   1        ES=1;     //¿ª´®¿ÚÖÐ¶Ï
 131   1      }
 132          /*******************************************************************************
 133          * º¯ÊýÃû : Find
 134          * ÃèÊö   : ÅÐ¶Ï»º´æÖÐÊÇ·ñº¬ÓÐÖ¸¶¨µÄ×Ö·û´®
 135          * ÊäÈë   : 
 136          * Êä³ö   : 
 137          * ·µ»Ø   : unsigned char:1 ÕÒµ½Ö¸¶¨×Ö·û£¬0 Î´ÕÒµ½Ö¸¶¨×Ö·û 
 138          * ×¢Òâ   : 
 139          *******************************************************************************/
 140          
 141          static const bool Find(uint8_t *content)
 142          { 
 143   1        ES = 0;  //¸Ä½ø³ÌÐò
 144   1        if(strstr(Uart1_Buf,content)!=NULL)
 145   1        {
 146   2          ES = 1;
 147   2          return true;
 148   2        } 
 149   1        else
 150   1        {
 151   2          ES = 1;
 152   2          return false;
 153   2        } 
 154   1      }
 155          static uint8_t UART1_Send_AT_Command_END(uint8_t *b,uint8_t *a,uint8_t wait_time,uint16_t interval_time)  
             -       
 156          {
 157   1        uint8_t i;
 158   1      
 159   1        CLR_Buf(); 
 160   1        i = 0;
 161   1        while(i < wait_time)                    
 162   1        {
 163   2          UART1_Send_Command_END(b);
 164   2          g_delay(interval_time);
 165   2          if(Find(a))            //²éÕÒÐèÒªÓ¦´ðµÄ×Ö·û
 166   2          {
 167   3            return 1;
 168   3          }
 169   2          i++;
 170   2        }
 171   1        
 172   1        return 0;
 173   1      }
 174          void UART1_Send_Command_END(char *s)
 175          {
C51 COMPILER V9.54   GSMMANAGER                                                            05/11/2019 18:19:50 PAGE 4   

 176   1        CLR_Buf(); 
 177   1        while(*s)//¼ì²â×Ö·û´®½áÊø·û
 178   1        {
 179   2          UART1_SendData(*s++);//·¢ËÍµ±Ç°×Ö·û
 180   2        }
 181   1      }
 182          /********************* UART1ÖÐ¶Ïº¯Êý************************/
 183          void UART1_ISR (void) interrupt 4
 184          {
 185   1        if (RI)
 186   1        {
 187   2          RI = 0;                           //Çå³ýRIÎ»
 188   2          Uart1_Buf[First_Int] = SBUF;      //½«½ÓÊÕµ½µÄ×Ö·û´®´æµ½»º´æÖÐ
 189   2          First_Int++;                    //»º´æÖ¸ÕëÏòºóÒÆ¶¯
 190   2          if(First_Int >= Buf_Max)          //Èç¹û»º´æÂú,½«»º´æÖ¸ÕëÖ¸Ïò»º´æµÄÊ×µØÖ·
 191   2          {
 192   3            First_Int = 0;
 193   3          }
 194   2        }
 195   1        if (TI)
 196   1        {
 197   2          TI = 0;                          //Çå³ýTIÎ»
 198   2        }
 199   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    528    ----
   CONSTANT SIZE    =     74    ----
   XDATA SIZE       =     73    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5      37
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
