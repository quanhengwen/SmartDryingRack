C51 COMPILER V9.59.0.0   GLOBALMANAGER                                                     04/24/2019 15:33:07 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE GLOBALMANAGER
OBJECT MODULE PLACED IN .\bin\globalManager.obj
COMPILER INVOKED BY: G:\Keil_v5\C51\BIN\C51.EXE globalManager\globalManager.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEN
                    -D PRINT(.\LinkFile\globalManager.lst) TABS(2) OBJECT(.\bin\globalManager.obj)

line level    source

   1          #include "globalManager.h"
   2          //全局管理全局对象
   3          static  GlobalManager this;
   4          /**
   5           * @brief 上电的时候初始化整个单片机所有的参数函数
   6           */
   7          void g_initSystemParameter()
   8          {
   9   1          //定时器中断初始化
  10   1          interrupt1Init();
  11   1        
  12   1          //函数的初始化
  13   1          this.controlMotor1StatusFunc=controlMotor1Status;
  14   1          this.controlMotor2StatusFunc=controlMotor2Status;
  15   1          this.handleSensorDataFunc=handleSensorData; 
  16   1      }
  17          const GlobalManager g_getGlobalManagerObj()
  18          {
  19   1        return this;
  20   1      }
  21          static const bool controlMotor1Status(const MotorStatus status)
  22          {
  23   1          switch(status){
  24   2            case Move_Up:               //正转
  25   2              Motor1ControlTurn(true,MOTOR1CIRCLENUMBER);
  26   2                    //todo把记录写入EEPROM
  27   2              return true;
  28   2            case Move_Down:              //反转
  29   2              Motor1ControlTurn(false,MOTOR1CIRCLENUMBER);
  30   2                    //todo把记录写入EEPROM
  31   2              return true;
  32   2            case Move_Stop:             //停止
  33   2              Motor1ControlStop();
  34   2              return true;
  35   2            default:
  36   2              return false;
  37   2          } 
  38   1      }
  39          static const bool controlMotor2Status(const MotorStatus status)
  40          {
  41   1          switch(status){
  42   2            case Move_Up:               //正转
  43   2              Motor2ControlTurn(true,MOTOR2CIRCLENUMBER);
  44   2              return true;
  45   2            case Move_Down:              //反转
  46   2              Motor2ControlTurn(false,MOTOR2CIRCLENUMBER);
  47   2              return true;
  48   2            case Move_Stop:             //停止
  49   2              Motor2ControlStop();
  50   2              return true;
  51   2            default:
  52   2              return false;
  53   2          } 
  54   1      }
C51 COMPILER V9.59.0.0   GLOBALMANAGER                                                     04/24/2019 15:33:07 PAGE 2   

  55          const bool handleSensorData(void)
  56          {
  57   1          uint8_t *adcValuePtr=nullptr;
  58   1          adcValuePtr=getAdcValue(0);//获取adc通道1的真实转换值，也就是in0对应的传感器的值
  59   1          //todo 处理传感器的值与阈值判断 
  60   1        
  61   1        
  62   1            return false;
  63   1      }
  64          void g_delay(const uint32_t one_10us)
  65          {
  66   1        if(!one_10us)
  67   1          return;
  68   1        g_EndCount=one_10us;
  69   1        g_CurrentCount=0;
  70   1        forever{
  71   2          if(g_CurrentCount>=g_EndCount)
  72   2            break;
  73   2        }
  74   1      }
  75          static void  interrupt1Init()
  76          {
  77   1        EA = OPEN;
  78   1        TMOD = 0x11;
  79   1        ET0 = OPEN;
  80   1        //10 us
  81   1        TH0=(65536-10)/256;
  82   1        TL0=(65536-10)%256;
  83   1        TR0=OPEN;
  84   1      }
  85          /*******************************************************************************
  86          * 函 数 名         : timeout
  87          * 函数功能       :定时器中断触发
  88          * 输    入         : 无
  89          * 输    出         : 无
  90          *******************************************************************************/
  91          void timeout(void) interrupt 1
  92          {
  93   1        //10 us
  94   1        TH0=(65536-10)/256;
  95   1        TL0=(65536-10)%256;
  96   1      
  97   1        g_CurrentCount++;
  98   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    209    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
